{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport firebase from \"firebase\";\nexport var AUTHENTICATE = 'AUTHENTICATE';\nexport var LOGOUT = 'LOGOUT';\nexport var SET_DID_TRY_AL = 'SET_DID_TRY_AL';\nvar timer;\nexport var setDidTryAL = function setDidTryAL() {\n  return {\n    type: SET_DID_TRY_AL\n  };\n};\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, userData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key= AIzaSyDiZxuuW-VLgepw3ReDat3x9Am_Cur2n6c', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n\n            if (errorId === 'EMAIL_EXISTS') {\n              message = 'This email exists already!';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            userData = {\n              email: resData.email,\n              uid: resData.localId\n            };\n            firebase.database().ref('/users/' + userData.uid).set({\n              email: userData.email,\n              created_at: Date.now(),\n              isAdmin: false\n            });\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData, isAdmin, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key= AIzaSyDiZxuuW-VLgepw3ReDat3x9Am_Cur2n6c', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = 'Something went wrong!';\n\n            if (errorId === 'EMAIL_NOT_FOUND') {\n              message = 'This email could not be found!';\n            } else if (errorId === 'INVALID_PASSWORD') {\n              message = 'This password is not valid!';\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context2.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            _context2.next = 18;\n            return _regeneratorRuntime.awrap(firebase.database().ref('/users/' + resData.localId).once('value').then(function (snapshot) {\n              isAdmin = snapshot.val().isAdmin;\n              console.log(\"[ISADMIN]\", isAdmin);\n            }));\n\n          case 18:\n            console.log(\"[OUT ISADMIN]\", isAdmin);\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate, isAdmin);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate, isAdmin) {\n  AsyncStorage.setItem('userData', JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString(),\n    isAdmin: isAdmin\n  }));\n};","map":{"version":3,"sources":["C:/DATA/react-native/Cart-notification/store/actions/auth.js"],"names":["firebase","AUTHENTICATE","LOGOUT","SET_DID_TRY_AL","timer","setDidTryAL","type","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","signup","email","password","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","resData","console","log","localId","idToken","parseInt","expiresIn","userData","uid","database","ref","set","created_at","Date","now","isAdmin","expirationDate","getTime","saveDataToStorage","login","once","then","snapshot","val","logout","clearLogoutTimer","AsyncStorage","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["import { AsyncStorage } from 'react-native';\nimport firebase from \"firebase\";\n\n// export const SIGNUP = 'SIGNUP';\n// export const LOGIN = 'LOGIN';\nexport const AUTHENTICATE = 'AUTHENTICATE';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_DID_TRY_AL = 'SET_DID_TRY_AL';\n\nlet timer;\n\nexport const setDidTryAL = () => {\n  return { type: SET_DID_TRY_AL };\n};\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return dispatch => {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({ type: AUTHENTICATE, userId: userId, token: token });\n  };\n};\n\nexport const signup = (email, password) => {\n  return async dispatch => {\n    const response = await fetch(\n      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key= AIzaSyDiZxuuW-VLgepw3ReDat3x9Am_Cur2n6c',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          returnSecureToken: true\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = 'Something went wrong!';\n      if (errorId === 'EMAIL_EXISTS') {\n        message = 'This email exists already!';\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n\n    const userData = {\n      email: resData.email,\n      uid: resData.localId,\n    }\n\n    firebase.database().ref('/users/' + userData.uid).set({\n      email: userData.email,\n      created_at: Date.now(),\n      isAdmin: false\n    })\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\n\nexport const login = (email, password) => {\n  return async dispatch => {\n    const response = await fetch(\n      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key= AIzaSyDiZxuuW-VLgepw3ReDat3x9Am_Cur2n6c',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password,\n          returnSecureToken: true\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = 'Something went wrong!';\n      if (errorId === 'EMAIL_NOT_FOUND') {\n        message = 'This email could not be found!';\n      } else if (errorId === 'INVALID_PASSWORD') {\n        message = 'This password is not valid!';\n      }\n      throw new Error(message);\n    }\n\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n\n    let isAdmin;\n\n    await firebase.database().ref('/users/' + resData.localId).once('value').then(function(snapshot) {\n      isAdmin = snapshot.val().isAdmin;\n      console.log(\"[ISADMIN]\", isAdmin);\n    });\n    console.log(\"[OUT ISADMIN]\", isAdmin);\n\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate, isAdmin);\n  };\n};\n\nexport const logout = () => {\n  clearLogoutTimer();\n  AsyncStorage.removeItem('userData');\n  return { type: LOGOUT };\n};\n\nconst clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nconst setLogoutTimer = expirationTime => {\n  return dispatch => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime);\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationDate, isAdmin) => {\n  AsyncStorage.setItem(\n    'userData',\n    JSON.stringify({\n      token: token,\n      userId: userId,\n      expiryDate: expirationDate.toISOString(),\n      isAdmin: isAdmin\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}