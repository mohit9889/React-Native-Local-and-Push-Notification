{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_TO_CART, REMOVE_FROM_CART } from \"../actions/cart\";\nimport { ADD_ORDER } from \"../actions/orders\";\nimport CartItem from \"../../models/cart-item\";\nimport { DELETE_PRODUCT } from \"../actions/products\";\nvar initialState = {\n  items: {},\n  totalAmount: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TO_CART:\n      var addedProduct = action.product;\n      var prodPrice = addedProduct.price;\n      var prodTitle = addedProduct.title;\n      var pushToken = addedProduct.pushToken;\n      var updatedOrNewCartItem;\n\n      if (state.items[addedProduct.id]) {\n        updatedOrNewCartItem = new CartItem(state.items[addedProduct.id].quantity + 1, prodPrice, prodTitle, pushToken, state.items[addedProduct.id].sum + prodPrice);\n      } else {\n        updatedOrNewCartItem = new CartItem(1, prodPrice, prodTitle, pushToken, prodPrice);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, addedProduct.id, updatedOrNewCartItem)),\n        totalAmount: state.totalAmount + prodPrice\n      });\n\n    case REMOVE_FROM_CART:\n      var selectedCartItem = state.items[action.pid];\n      var currentQty = selectedCartItem.quantity;\n      var updatedCartItems;\n\n      if (currentQty > 1) {\n        var updatedCartItem = new CartItem(selectedCartItem.quantity - 1, selectedCartItem.productPrice, selectedCartItem.productTitle, selectedCartItem.sum - selectedCartItem.productPrice);\n        updatedCartItems = _objectSpread(_objectSpread({}, state.items), {}, _defineProperty({}, action.pid, updatedCartItem));\n      } else {\n        updatedCartItems = _objectSpread({}, state.items);\n        delete updatedCartItems[action.pid];\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: updatedCartItems,\n        totalAmount: state.totalAmount - selectedCartItem.productPrice\n      });\n\n    case ADD_ORDER:\n      return initialState;\n\n    case DELETE_PRODUCT:\n      if (!state.items[action.pid]) {\n        return state;\n      }\n\n      var updatedItems = _objectSpread({}, state.items);\n\n      var itemTotal = state.items[action.pid].sum;\n      delete updatedItems[action.pid];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: updatedItems,\n        totalAmount: state.totalAmount - itemTotal\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["C:/DATA/react-native/Cart-notification/store/reducers/cart.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","ADD_ORDER","CartItem","DELETE_PRODUCT","initialState","items","totalAmount","state","action","type","addedProduct","product","prodPrice","price","prodTitle","title","pushToken","updatedOrNewCartItem","id","quantity","sum","selectedCartItem","pid","currentQty","updatedCartItems","updatedCartItem","productPrice","productTitle","updatedItems","itemTotal"],"mappings":"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","sourcesContent":["import { ADD_TO_CART, REMOVE_FROM_CART } from '../actions/cart';\nimport { ADD_ORDER } from '../actions/orders';\nimport CartItem from '../../models/cart-item';\nimport { DELETE_PRODUCT } from '../actions/products';\n\nconst initialState = {\n  items: {},\n  totalAmount: 0,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TO_CART:\n      const addedProduct = action.product;\n      const prodPrice = addedProduct.price;\n      const prodTitle = addedProduct.title;\n      const pushToken = addedProduct.pushToken;\n\n      let updatedOrNewCartItem;\n\n      if (state.items[addedProduct.id]) {\n        // already have the item in the cart\n        updatedOrNewCartItem = new CartItem(\n          state.items[addedProduct.id].quantity + 1,\n          prodPrice,\n          prodTitle,\n          pushToken,\n          state.items[addedProduct.id].sum + prodPrice\n        );\n      } else {\n        updatedOrNewCartItem = new CartItem(\n          1,\n          prodPrice,\n          prodTitle,\n          pushToken,\n          prodPrice\n        );\n      }\n      return {\n        ...state,\n        items: { ...state.items, [addedProduct.id]: updatedOrNewCartItem },\n        totalAmount: state.totalAmount + prodPrice,\n      };\n    case REMOVE_FROM_CART:\n      const selectedCartItem = state.items[action.pid];\n      const currentQty = selectedCartItem.quantity;\n      let updatedCartItems;\n      if (currentQty > 1) {\n        // need to reduce it, not erase it\n        const updatedCartItem = new CartItem(\n          selectedCartItem.quantity - 1,\n          selectedCartItem.productPrice,\n          selectedCartItem.productTitle,\n          selectedCartItem.sum - selectedCartItem.productPrice\n        );\n        updatedCartItems = { ...state.items, [action.pid]: updatedCartItem };\n      } else {\n        updatedCartItems = { ...state.items };\n        delete updatedCartItems[action.pid];\n      }\n      return {\n        ...state,\n        items: updatedCartItems,\n        totalAmount: state.totalAmount - selectedCartItem.productPrice,\n      };\n    case ADD_ORDER:\n      return initialState;\n    case DELETE_PRODUCT:\n      if (!state.items[action.pid]) {\n        return state;\n      }\n      const updatedItems = { ...state.items };\n      const itemTotal = state.items[action.pid].sum;\n      delete updatedItems[action.pid];\n      return {\n        ...state,\n        items: updatedItems,\n        totalAmount: state.totalAmount - itemTotal,\n      };\n  }\n\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}