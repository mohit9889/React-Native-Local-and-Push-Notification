{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\DATA\\\\react-native\\\\Cart-notification\\\\App.js\";\nimport React, { useState } from 'react';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport ReduxThunk from 'redux-thunk';\nimport * as Notifications from 'expo-notifications';\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport productsReducer from \"./store/reducers/products\";\nimport cartReducer from \"./store/reducers/cart\";\nimport ordersReducer from \"./store/reducers/orders\";\nimport authReducer from \"./store/reducers/auth\";\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport * as firebase from \"firebase\";\nimport { firebaseConfig } from \"./config\";\nfirebase.initializeApp(firebaseConfig);\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nvar rootReducer = combineReducers({\n  products: productsReducer,\n  cart: cartReducer,\n  orders: ordersReducer,\n  auth: authReducer\n});\nvar store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nYellowBox.ignoreWarnings(['Setting a timer']);\nconsole.ignoredYellowBox = ['Setting a timer'];\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontLoaded = _useState2[1];\n\n  if (!fontLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        setFontLoaded(true);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, React.createElement(AppNavigator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/DATA/react-native/Cart-notification/App.js"],"names":["React","useState","createStore","combineReducers","applyMiddleware","Provider","AppLoading","Font","ReduxThunk","Notifications","productsReducer","cartReducer","ordersReducer","authReducer","AppNavigator","firebase","firebaseConfig","initializeApp","setNotificationHandler","handleNotification","shouldShowAlert","rootReducer","products","cart","orders","auth","store","fetchFonts","loadAsync","require","YellowBox","ignoreWarnings","console","ignoredYellowBox","App","fontLoaded","setFontLoaded"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;;AAGA,OAAOC,eAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,YAAP;AAEA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,SAAQC,cAAR;AACAD,QAAQ,CAACE,aAAT,CAAuBD,cAAvB;AAEAP,aAAa,CAACS,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CACX;AAAEC,cAAAA,eAAe,EAAE;AAAnB,aADW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;AAMA,IAAMC,WAAW,GAAGlB,eAAe,CAAC;AAClCmB,EAAAA,QAAQ,EAAEZ,eADwB;AAElCa,EAAAA,IAAI,EAAEZ,WAF4B;AAGlCa,EAAAA,MAAM,EAAEZ,aAH0B;AAIlCa,EAAAA,IAAI,EAAEZ;AAJ4B,CAAD,CAAnC;AAOA,IAAMa,KAAK,GAAGxB,WAAW,CAACmB,WAAD,EAAcjB,eAAe,CAACI,UAAD,CAA7B,CAAzB;;AAEA,IAAMmB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOpB,IAAI,CAACqB,SAAL,CAAe;AACpB,iBAAaC,OAAO,uCADA;AAEpB,sBAAkBA,OAAO;AAFL,GAAf,CAAP;AAID,CALD;;AAOAC,SAAS,CAACC,cAAV,CAAyB,CAAC,iBAAD,CAAzB;AACAC,OAAO,CAACC,gBAAR,GAA2B,CAAC,iBAAD,CAA3B;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACQjC,QAAQ,CAAC,KAAD,CADhB;AAAA;AAAA,MACrBkC,UADqB;AAAA,MACTC,aADS;;AAG5B,MAAI,CAACD,UAAL,EAAiB;AACf,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAER,UADd;AAEE,MAAA,QAAQ,EAAE,oBAAM;AACdS,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD;;AACD,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEV,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD","sourcesContent":["import React, { useState } from 'react';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport ReduxThunk from 'redux-thunk';\nimport * as Notifications from 'expo-notifications';\nimport { YellowBox } from 'react-native';\n\nimport productsReducer from './store/reducers/products';\nimport cartReducer from './store/reducers/cart';\nimport ordersReducer from './store/reducers/orders';\nimport authReducer from './store/reducers/auth';\nimport AppNavigator from './navigation/AppNavigator';\n\nimport * as firebase from \"firebase\";\nimport {firebaseConfig} from \"./config\";\nfirebase.initializeApp(firebaseConfig);\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => {\n    return { shouldShowAlert: true };\n  },\n});\n\nconst rootReducer = combineReducers({\n  products: productsReducer,\n  cart: cartReducer,\n  orders: ordersReducer,\n  auth: authReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nconst fetchFonts = () => {\n  return Font.loadAsync({\n    'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n    'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf'),\n  });\n};\n\nYellowBox.ignoreWarnings(['Setting a timer']);\nconsole.ignoredYellowBox = ['Setting a timer'];\n\nexport default function App() {\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!fontLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchFonts}\n        onFinish={() => {\n          setFontLoaded(true);\n        }}\n      />\n    );\n  }\n  return (\n    <Provider store={store}>\n      <AppNavigator />\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}